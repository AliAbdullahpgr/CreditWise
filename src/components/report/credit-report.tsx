
'use client';

import { formatCurrency, formatPercent } from '@/lib/reportUtils';

export default function CreditReportComponent({ reportData }: { reportData: any }) {
  const { summary, creditScore, loanEligibility, financialMetrics, transactionAnalysis, monthlyBreakdown, insights } = reportData;
  
  return (
    <div className="max-w-4xl mx-auto bg-white">
      <CoverPage summary={summary} creditScore={creditScore} loanEligibility={loanEligibility} />
      <ScoreBreakdown creditScore={creditScore} />
      <FinancialOverview financialMetrics={financialMetrics} monthlyBreakdown={monthlyBreakdown} />
      <TransactionAnalysis transactionAnalysis={transactionAnalysis} />
      <RiskAssessment creditScore={creditScore} insights={insights} />
      <LoanEligibility loanEligibility={loanEligibility} financialMetrics={financialMetrics} />
      <AIInsights insights={insights} />
      <Methodology summary={summary} />
    </div>
  );
}

function CoverPage({ summary, creditScore, loanEligibility }: { summary: any, creditScore: any, loanEligibility: any }) {
  const getRiskColor = (level: string) => {
    const colors: { [key: string]: string } = {
      low: 'text-green-600 bg-green-50',
      medium: 'text-yellow-600 bg-yellow-50',
      high: 'text-red-600 bg-red-50',
    };
    return colors[level] || colors.medium;
  };
  
  const getRiskLabel = (level: string) => {
    const labels: { [key: string]: string } = { low: 'LOW RISK', medium: 'MEDIUM RISK', high: 'HIGH RISK' };
    return labels[level] || 'MEDIUM RISK';
  };
  
  return (
    <div className="p-12 border-b-4 border-blue-600 min-h-screen flex flex-col justify-center">
      <div className="text-center mb-12">
        <h1 className="text-4xl font-bold text-gray-900 mb-2">
          SME CREDITWORTHINESS ASSESSMENT REPORT
        </h1>
        <div className="w-32 h-1 bg-blue-600 mx-auto"></div>
      </div>
      
      <div className="space-y-6 mb-12">
        <InfoRow label="Business ID" value={summary.businessId} />
        <InfoRow label="Report Date" value={new Date(summary.reportDate).toLocaleDateString()} />
        <InfoRow label="Assessment Period" value={`${summary.assessmentPeriod.start} to ${summary.assessmentPeriod.end}`} />
      </div>
      
      <div className="text-center py-12 bg-gradient-to-br from-blue-50 to-blue-100 rounded-lg mb-8">
        <h2 className="text-2xl font-semibold text-gray-700 mb-4">ALTERNATIVE CREDIT SCORE</h2>
        <div className="text-8xl font-bold text-blue-600 mb-4">
          {creditScore.total}
          <span className="text-4xl text-gray-500">/1000</span>
        </div>
        <div className={`inline-block px-8 py-3 rounded-full text-xl font-bold ${getRiskColor(creditScore.riskLevel)}`}>
          ⭐ {getRiskLabel(creditScore.riskLevel)} ⭐
        </div>
      </div>
      
      <div className="bg-blue-50 border-l-4 border-blue-600 p-6 rounded-r-lg">
        <h3 className="text-xl font-bold text-gray-900 mb-4">LOAN RECOMMENDATION</h3>
        <div className="grid grid-cols-2 gap-4">
          <div>
            <p className="text-sm text-gray-600">Eligible Loan Amount</p>
            <p className="text-2xl font-bold text-blue-600">{formatCurrency(loanEligibility.maxAmount)}</p>
          </div>
          <div>
            <p className="text-sm text-gray-600">Interest Rate Range</p>
            <p className="text-2xl font-bold text-blue-600">{loanEligibility.interestRate} APR</p>
          </div>
          <div>
            <p className="text-sm text-gray-600">Monthly Repayment Capacity</p>
            <p className="text-2xl font-bold text-blue-600">{formatCurrency(loanEligibility.monthlyRepayment)}</p>
          </div>
          <div>
            <p className="text-sm text-gray-600">Approval Probability</p>
            <p className="text-2xl font-bold text-blue-600">{creditScore.approvalProbability.toFixed(0)}%</p>
          </div>
        </div>
      </div>
      
      <div className="mt-12 pt-6 border-t border-gray-300 text-center text-sm text-gray-600">
        <p>Report ID: {summary.reportId}</p>
        <p>Generated by CreditWise AI Assessment Platform</p>
      </div>
    </div>
  );
}

function ScoreBreakdown({ creditScore }: { creditScore: any }) {
    const components = [
      { name: 'Bill Payment History', score: creditScore.components.billPaymentHistory, max: 300, weight: 30 },
      { name: 'Income Consistency', score: creditScore.components.incomeConsistency, max: 250, weight: 25 },
      { name: 'Expense Management', score: creditScore.components.expenseManagement, max: 200, weight: 20 },
      { name: 'Financial Growth', score: creditScore.components.financialGrowth, max: 150, weight: 15 },
      { name: 'Transaction Diversity', score: creditScore.components.transactionDiversity, max: 100, weight: 10 },
    ];
  
  const getStatus = (score: number, max: number) => {
    const percentage = (score / max) * 100;
    if (percentage >= 85) return { label: 'EXCELLENT', color: 'text-green-600' };
    if (percentage >= 70) return { label: 'GOOD', color: 'text-blue-600' };
    if (percentage >= 50) return { label: 'FAIR', color: 'text-yellow-600' };
    return { label: 'NEEDS IMPROVEMENT', color: 'text-red-600' };
  };
  
  return (
    <div className="p-12 border-b border-gray-200">
      <h2 className="text-3xl font-bold text-gray-900 mb-8">CREDIT SCORE COMPONENT ANALYSIS</h2>
      
      <div className="overflow-x-auto">
        <table className="w-full">
          <thead>
            <tr className="border-b-2 border-gray-300">
              <th className="text-left py-3 px-4 font-semibold text-gray-700">Component</th>
              <th className="text-center py-3 px-4 font-semibold text-gray-700">Score</th>
              <th className="text-center py-3 px-4 font-semibold text-gray-700">Weight</th>
              <th className="text-center py-3 px-4 font-semibold text-gray-700">Status</th>
              <th className="text-right py-3 px-4 font-semibold text-gray-700">Progress</th>
            </tr>
          </thead>
          <tbody>
            {components.map((comp, idx) => {
              const status = getStatus(comp.score, comp.max);
              const percentage = (comp.score / comp.max) * 100;
              
              return (
                <tr key={idx} className="border-b border-gray-200">
                  <td className="py-4 px-4 font-medium">{comp.name}</td>
                  <td className="text-center py-4 px-4">
                    <span className="font-bold text-blue-600">{comp.score}</span>
                    <span className="text-gray-500">/{comp.max}</span>
                  </td>
                  <td className="text-center py-4 px-4 text-gray-600">{comp.weight}%</td>
                  <td className="text-center py-4 px-4">
                    <span className={`font-semibold ${status.color}`}>{status.label}</span>
                  </td>
                  <td className="py-4 px-4">
                    <div className="flex items-center justify-end">
                      <div className="w-32 h-3 bg-gray-200 rounded-full overflow-hidden">
                        <div 
                          className="h-full bg-blue-600 rounded-full transition-all duration-500"
                          style={{ width: `${percentage}%` }}
                        ></div>
                      </div>
                      <span className="ml-2 text-sm text-gray-600">{percentage.toFixed(0)}%</span>
                    </div>
                  </td>
                </tr>
              );
            })}
          </tbody>
        </table>
      </div>
      
      <div className="mt-8 p-6 bg-blue-50 rounded-lg">
        <div className="flex items-center justify-between">
          <span className="text-xl font-semibold text-gray-900">TOTAL SCORE</span>
          <span className="text-4xl font-bold text-blue-600">{creditScore.total}/1000</span>
        </div>
      </div>
    </div>
  );
}

function FinancialOverview({ financialMetrics, monthlyBreakdown }: { financialMetrics: any, monthlyBreakdown: any }) {
    const months = monthlyBreakdown ? Object.keys(monthlyBreakdown).sort() : [];
  
  return (
    <div className="p-12 border-b border-gray-200">
      <h2 className="text-3xl font-bold text-gray-900 mb-8">FINANCIAL PERFORMANCE SUMMARY</h2>
      
      <div className="grid grid-cols-3 gap-6 mb-8">
        <MetricCard 
          label="Total Revenue" 
          value={formatCurrency(financialMetrics.totalIncome)}
          sublabel="Last 6 months"
        />
        <MetricCard 
          label="Total Expenses" 
          value={formatCurrency(financialMetrics.totalExpenses)}
          sublabel="Last 6 months"
        />
        <MetricCard 
          label="Net Profit" 
          value={formatCurrency(financialMetrics.netProfit)}
          sublabel={`${formatPercent(financialMetrics.profitMargin)} margin`}
          positive={financialMetrics.netProfit > 0}
        />
        <MetricCard 
          label="Avg Monthly Revenue" 
          value={formatCurrency(financialMetrics.avgMonthlyIncome)}
        />
        <MetricCard 
          label="Avg Monthly Expenses" 
          value={formatCurrency(financialMetrics.avgMonthlyExpenses)}
        />
        <MetricCard 
          label="Current Balance" 
          value={formatCurrency(financialMetrics.currentBalance)}
          sublabel={`${financialMetrics.emergencyBuffer} months buffer`}
        />
      </div>
      
      <h3 className="text-xl font-bold text-gray-900 mb-4">Monthly Performance</h3>
      <div className="overflow-x-auto">
        <table className="w-full">
          <thead>
            <tr className="bg-gray-100">
              <th className="text-left py-3 px-4 font-semibold">Month</th>
              <th className="text-right py-3 px-4 font-semibold">Income</th>
              <th className="text-right py-3 px-4 font-semibold">Expenses</th>
              <th className="text-right py-3 px-4 font-semibold">Net Profit</th>
              <th className="text-right py-3 px-4 font-semibold">Balance</th>
            </tr>
          </thead>
          <tbody>
            {months.map((month, idx) => {
              const data = monthlyBreakdown[month];
              const isProfit = data.netProfit > 0;
              
              return (
                <tr key={idx} className="border-b border-gray-200">
                  <td className="py-3 px-4 font-medium">{new Date(month).toLocaleDateString('en-US', { year: 'numeric', month: 'short' })}</td>
                  <td className="text-right py-3 px-4 text-green-600">{formatCurrency(data.income)}</td>
                  <td className="text-right py-3 px-4 text-red-600">{formatCurrency(data.expenses)}</td>
                  <td className={`text-right py-3 px-4 font-semibold ${isProfit ? 'text-green-600' : 'text-red-600'}`}>
                    {formatCurrency(data.netProfit)}
                  </td>
                  <td className="text-right py-3 px-4">{formatCurrency(data.balance)}</td>
                </tr>
              );
            })}
          </tbody>
        </table>
      </div>
    </div>
  );
}

function TransactionAnalysis({ transactionAnalysis }: { transactionAnalysis: any }) {
  return (
    <div className="p-12 border-b border-gray-200">
      <h2 className="text-3xl font-bold text-gray-900 mb-8">TRANSACTION BEHAVIOR ANALYSIS</h2>
      
      <div className="grid grid-cols-2 gap-8 mb-8">
        <div>
          <h3 className="text-lg font-semibold text-gray-900 mb-4">Transaction Volume</h3>
          <div className="space-y-3">
            <StatRow label="Total Transactions" value={transactionAnalysis.totalCount} />
            <StatRow label="Avg Daily Transactions" value={transactionAnalysis.avgDailyTransactions.toFixed(1)} />
            <StatRow label="Documentation Rate" value={formatPercent(transactionAnalysis.documentationRate)} />
            <StatRow label="Transactions with Merchant" value={transactionAnalysis.verifiedCount} />
          </div>
        </div>
        
        <div>
          <h3 className="text-lg font-semibold text-gray-900 mb-4">Payment Methods</h3>
          <div className="space-y-2">
            {transactionAnalysis.paymentMethods.map((method: any, idx: number) => (
              <div key={idx} className="flex items-center justify-between">
                <span className="text-gray-700">{method.name}</span>
                <div className="flex items-center gap-2">
                  <div className="w-24 h-2 bg-gray-200 rounded-full overflow-hidden">
                    <div 
                      className="h-full bg-blue-600 rounded-full"
                      style={{ width: `${method.percentage}%` }}
                    ></div>
                  </div>
                  <span className="text-sm text-gray-600 w-12 text-right">{method.percentage.toFixed(0)}%</span>
                </div>
              </div>
            ))}
          </div>
        </div>
      </div>
      
      <h3 className="text-lg font-semibold text-gray-900 mb-4">Top Transaction Categories</h3>
      <div className="grid grid-cols-2 gap-4">
        {transactionAnalysis.categories.slice(0, 6).map((cat: any, idx: number) => (
          <div key={idx} className="flex justify-between items-center p-3 bg-gray-50 rounded">
            <span className="font-medium text-gray-700">{cat.name}</span>
            <span className="text-blue-600 font-semibold">{formatCurrency(cat.amount)}</span>
          </div>
        ))}
      </div>
    </div>
  );
}

function RiskAssessment({ creditScore, insights }: { creditScore: any, insights: any[] }) {
  const positiveInsights = insights.filter(i => i.type === 'positive');
  const warnings = insights.filter(i => i.type === 'warning');
  
  return (
    <div className="p-12 border-b border-gray-200">
      <h2 className="text-3xl font-bold text-gray-900 mb-8">RISK ASSESSMENT</h2>
      
      <div className={`p-6 rounded-lg mb-8 ${
        creditScore.riskLevel === 'low' ? 'bg-green-50 border-2 border-green-500' :
        creditScore.riskLevel === 'medium' ? 'bg-yellow-50 border-2 border-yellow-500' :
        'bg-red-50 border-2 border-red-500'
      }`}>
        <h3 className="text-2xl font-bold mb-2">
          Overall Risk Level: {creditScore.riskLevel.toUpperCase()} RISK
        </h3>
        <p className="text-gray-700">
          Approval Probability: <span className="font-bold">{creditScore.approvalProbability.toFixed(0)}%</span>
        </p>
      </div>
      
      {positiveInsights.length > 0 && (
        <div className="mb-8">
          <h3 className="text-xl font-bold text-green-700 mb-4">✓ Positive Indicators</h3>
          <div className="space-y-3">
            {positiveInsights.map((insight, idx) => (
              <div key={idx} className="p-4 bg-green-50 border-l-4 border-green-500 rounded-r">
                <h4 className="font-semibold text-gray-900">{insight.title}</h4>
                <p className="text-gray-700 text-sm mt-1">{insight.description}</p>
              </div>
            ))}
          </div>
        </div>
      )}
      
      {warnings.length > 0 && (
        <div className="mb-8">
          <h3 className="text-xl font-bold text-yellow-700 mb-4">⚠ Areas for Improvement</h3>
          <div className="space-y-3">
            {warnings.map((insight, idx) => (
              <div key={idx} className="p-4 bg-yellow-50 border-l-4 border-yellow-500 rounded-r">
                <h4 className="font-semibold text-gray-900">{insight.title}</h4>
                <p className="text-gray-700 text-sm mt-1">{insight.description}</p>
              </div>
            ))}
          </div>
        </div>
      )}
    </div>
  );
}

function LoanEligibility({ loanEligibility, financialMetrics }: { loanEligibility: any, financialMetrics: any }) {
  return (
    <div className="p-12 border-b border-gray-200">
      <h2 className="text-3xl font-bold text-gray-900 mb-8">LOAN ELIGIBILITY ASSESSMENT</h2>
      
      <div className="grid grid-cols-2 gap-8 mb-8">
        <div className="p-6 bg-blue-50 rounded-lg border-2 border-blue-500">
          <h3 className="text-lg font-semibold text-gray-900 mb-2">Maximum Eligible Amount</h3>
          <p className="text-4xl font-bold text-blue-600">{formatCurrency(loanEligibility.maxAmount)}</p>
          <p className="text-sm text-gray-600 mt-2">Based on 6× monthly revenue</p>
        </div>
        <div className="p-6 bg-gray-50 rounded-lg border-2 border-gray-300">
          <h3 className="text-lg font-semibold text-gray-900 mb-2">Monthly Repayment Capacity</h3>
          <p className="text-4xl font-bold text-gray-700">{formatCurrency(loanEligibility.monthlyRepayment)}</p>
          <p className="text-sm text-gray-600 mt-2">~40% of monthly income</p>
        </div>
      </div>
      
      <div className="grid grid-cols-2 gap-6 mb-8">
        <InfoCard 
          label="Suggested Interest Rate" 
          value={loanEligibility.interestRate}
          description="Based on risk profile"
        />
        <InfoCard 
          label="Recommended Tenure" 
          value={loanEligibility.recommendedTenure}
          description="Optimal repayment period"
        />
      </div>
      
      <div className="bg-blue-50 p-6 rounded-lg">
        <h3 className="text-lg font-bold text-gray-900 mb-4">Recommended Financial Institutions</h3>
        <div className="grid grid-cols-2 gap-4">
          <BankCard name="HBL SME Finance" match="95%" />
          <BankCard name="MCB Islamic Business Loan" match="92%" />
          <BankCard name="Bank Alfalah SME Banking" match="88%" />
          <BankCard name="Akhuwat Interest-Free Loans" match="85%" />
        </div>
      </div>
    </div>
  );
}

function AIInsights({ insights }: { insights: any[] }) {
  const getInsightIcon = (type: string) => {
    const icons: { [key: string]: string } = {
      positive: '✅',
      warning: '⚠️',
      suggestion: '💡',
    };
    return icons[type] || '📊';
  };
  
  const getInsightColor = (type: string) => {
    const colors: { [key: string]: string } = {
      positive: 'bg-green-50 border-green-500',
      warning: 'bg-yellow-50 border-yellow-500',
      suggestion: 'bg-blue-50 border-blue-500',
    };
    return colors[type] || 'bg-gray-50 border-gray-500';
  };
  
  return (
    <div className="p-12 border-b border-gray-200">
      <h2 className="text-3xl font-bold text-gray-900 mb-8">AI-POWERED BUSINESS INSIGHTS</h2>
      
      <div className="space-y-6">
        {insights.map((insight, idx) => (
          <div key={idx} className={`p-6 border-l-4 rounded-r-lg ${getInsightColor(insight.type)}`}>
            <div className="flex items-start gap-4">
              <span className="text-3xl">{getInsightIcon(insight.type)}</span>
              <div className="flex-1">
                <h3 className="text-xl font-bold text-gray-900 mb-2">
                  {insight.title}
                </h3>
                <p className="text-gray-700">{insight.description}</p>
              </div>
            </div>
          </div>
        ))}
      </div>
      
      <div className="mt-8 p-6 bg-gradient-to-r from-blue-50 to-purple-50 rounded-lg border-2 border-blue-300">
        <h3 className="text-xl font-bold text-gray-900 mb-3">📈 Growth Opportunities</h3>
        <p className="text-gray-700 mb-4">
          Based on your financial health, your business is ready for expansion. 
          Consider these opportunities:
        </p>
        <ul className="space-y-2 text-gray-700">
          <li className="flex items-start gap-2">
            <span className="text-blue-600 font-bold">•</span>
            <span>Opening a second location (Recommended loan: PKR 800K)</span>
          </li>
          <li className="flex items-start gap-2">
            <span className="text-blue-600 font-bold">•</span>
            <span>Inventory expansion to meet growing demand</span>
          </li>
          <li className="flex items-start gap-2">
            <span className="text-blue-600 font-bold">•</span>
            <span>Digital marketing campaign to boost revenue</span>
          </li>
        </ul>
      </div>
    </div>
  );
}

function Methodology({ summary }: { summary: any }) {
  return (
    <div className="p-12">
      <h2 className="text-3xl font-bold text-gray-900 mb-8">REPORT METHODOLOGY</h2>
      
      <div className="space-y-6 mb-8">
        <div>
          <h3 className="text-xl font-bold text-gray-900 mb-3">Assessment Framework</h3>
          <p className="text-gray-700 leading-relaxed">
            This report uses a Transaction-Based Credit Scoring model specifically designed 
            for SMEs without traditional credit history. The methodology combines statistical 
            analysis, financial ratios, and alternative data scoring techniques used by leading 
            fintech companies.
          </p>
        </div>
        
        <div>
          <h3 className="text-xl font-bold text-gray-900 mb-3">Scoring Components</h3>
          <ul className="space-y-2 text-gray-700">
            <li><strong>Bill Payment History (30%):</strong> On-time payment for rent, utilities.</li>
            <li><strong>Income Consistency (25%):</strong> Regularity of income streams.</li>
            <li><strong>Expense Management (20%):</strong> Expense-to-income ratio analysis.</li>
            <li><strong>Financial Growth (15%):</strong> Month-over-month income trends.</li>
            <li><strong>Transaction Diversity (10%):</strong> Variety in transaction types and sources.</li>
          </ul>
        </div>
        
        <div>
          <h3 className="text-xl font-bold text-gray-900 mb-3">Data Quality</h3>
          <div className="grid grid-cols-3 gap-4">
            <StatCard label="Transactions Analyzed" value="287" />
            <StatCard label="Data Quality Score" value="94/100" />
            <StatCard label="Analysis Period" value="6 months" />
          </div>
        </div>
      </div>
      
      <div className="border-t-4 border-blue-600 pt-8">
        <h3 className="text-2xl font-bold text-center text-gray-900 mb-4">CERTIFICATION</h3>
        <p className="text-center text-gray-700 mb-6">
          This report has been generated using verified transaction data and advanced 
          analytical algorithms in accordance with financial assessment best practices.
        </p>
        
        <div className="bg-gray-50 p-6 rounded-lg">
          <div className="grid grid-cols-2 gap-4 text-sm">
            <div>
              <p className="text-gray-600">Report ID:</p>
              <p className="font-bold text-gray-900">{summary.reportId}</p>
            </div>
            <div>
              <p className="text-gray-600">Report Validity:</p>
              <p className="font-bold text-gray-900">90 days from issue date</p>
            </div>
            <div>
              <p className="text-gray-600">Generated:</p>
              <p className="font-bold text-gray-900">{new Date(summary.reportDate).toLocaleString()}</p>
            </div>
            <div>
              <p className="text-gray-600">Next Review Due:</p>
              <p className="font-bold text-gray-900">
                {new Date(new Date(summary.reportDate).getTime() + 90 * 24 * 60 * 60 * 1000).toLocaleDateString()}
              </p>
            </div>
          </div>
        </div>
        
        <div className="mt-6 text-center text-sm text-gray-600">
          <p>For verification of this report, financial institutions can contact:</p>
          <p className="font-semibold mt-2">verify@hisaabscore.com</p>
        </div>
      </div>
      
      <div className="mt-8 flex justify-center">
        <div className="text-center">
          <div className="w-32 h-32 bg-gray-200 rounded-lg flex items-center justify-center mb-2">
            <span className="text-gray-500 text-xs">QR Code</span>
          </div>
          <p className="text-xs text-gray-600">Scan to verify report authenticity</p>
        </div>
      </div>
    </div>
  );
}

function InfoRow({ label, value }: { label: string, value: string }) {
  return (
    <div className="flex justify-between items-center py-2 border-b border-gray-200">
      <span className="text-gray-600 font-medium">{label}:</span>
      <span className="text-gray-900 font-semibold">{value}</span>
    </div>
  );
}

function MetricCard({ label, value, sublabel, positive }: { label: string, value: string, sublabel?: string, positive?: boolean }) {
  return (
    <div className="p-4 bg-gray-50 rounded-lg border border-gray-200">
      <p className="text-sm text-gray-600 mb-1">{label}</p>
      <p className={`text-2xl font-bold ${positive === false ? 'text-red-600' : positive ? 'text-green-600' : 'text-gray-900'}`}>
        {value}
      </p>
      {sublabel && <p className="text-xs text-gray-500 mt-1">{sublabel}</p>}
    </div>
  );
}

function StatRow({ label, value }: { label: string, value: any }) {
  return (
    <div className="flex justify-between items-center">
      <span className="text-gray-700">{label}:</span>
      <span className="font-semibold text-gray-900">{value}</span>
    </div>
  );
}

function InfoCard({ label, value, description }: { label: string, value: string, description: string }) {
  return (
    <div className="p-4 bg-gray-50 rounded-lg border border-gray-200">
      <p className="text-sm text-gray-600 mb-1">{label}</p>
      <p className="text-xl font-bold text-gray-900">{value}</p>
      <p className="text-xs text-gray-500 mt-1">{description}</p>
    </div>
  );
}

function BankCard({ name, match }: { name: string, match: string }) {
  return (
    <div className="p-3 bg-white rounded border border-gray-200 flex justify-between items-center">
      <span className="font-medium text-gray-900">{name}</span>
      <span className="text-sm font-semibold text-green-600">{match} Match</span>
    </div>
  );
}

function StatCard({ label, value }: { label: string, value: string }) {
  return (
    <div className="text-center p-4 bg-blue-50 rounded-lg">
      <p className="text-3xl font-bold text-blue-600">{value}</p>
      <p className="text-sm text-gray-600 mt-1">{label}</p>
    </div>
  );
}
